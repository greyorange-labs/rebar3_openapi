%%%-------------------------------------------------------------------
%%% @doc Logic handler for business logic
%%% Implement your business logic callbacks here
%%% Generated by rebar3_openapi - IMPLEMENT YOUR LOGIC
%%% @end
%%%-------------------------------------------------------------------
-module(bsh_http_logic_handler).

%% API exports
-export([
    provide_callback/4,
    accept_callback/4,
    get_schema/1
]).

%%%===================================================================
%%% Schema Loader Helper
%%%===================================================================

%% @doc Load JSON schema for validation
%% Schemas are located in priv/schemas/bsh_http_handler/ directory
%% Example: get_schema('ErrorResponse') or get_schema("ErrorResponse")
get_schema(SchemaName) when is_atom(SchemaName) ->
    get_schema(atom_to_list(SchemaName));
get_schema(SchemaName) when is_list(SchemaName) ->
    PrivDir = code:priv_dir(bsh_http_handler_app),  %% Adjust to your app name
    SchemaFile = filename:join([PrivDir, "schemas", "bsh_http_handler", SchemaName ++ ".json"]),
    case file:read_file(SchemaFile) of
        {ok, SchemaBin} -> jsx:decode(SchemaBin, [return_maps]);
        {error, Reason} -> error({schema_not_found, SchemaName, Reason})
    end.

%%%===================================================================
%%% API - Provide Callbacks (GET, HEAD)
%%%===================================================================

%% @doc Get advanced logging status
%% Path: /api/butler_shared/v1/logging/debug
provide_callback(_Class, 'get_debug_logging_status', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Call your controller function here
    %% Result = your_controller:handle_get_debug_logging_status(Req),
    %% ResponseBody = jsx:encode(Result),
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 200, Headers, ResponseBody, Req, Context};

%% @doc Health Check Endpoint
%% Path: /v1/health
provide_callback(_Class, 'health_check', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Call your controller function here
    %% Result = your_controller:handle_health_check(Req),
    %% ResponseBody = jsx:encode(Result),
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 200, Headers, ResponseBody, Req, Context};

%% @doc Get Service Status
%% Path: /v1/status
provide_callback(_Class, 'get_service_status', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Call your controller function here
    %% Result = your_controller:handle_get_service_status(Req),
    %% ResponseBody = jsx:encode(Result),
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 200, Headers, ResponseBody, Req, Context};


%%%===================================================================
%%% API - Accept Callbacks (POST, PUT, DELETE, PATCH)
%%%===================================================================

%% @doc Get Infrastructure Diagnostics Result
%% Path: /api/butler_shared/diagnose/infra (POST)
accept_callback(_Class, 'diagnose_infra', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Parse request body and call your controller
    %% {ok, Body, Req2} = cowboy_req:read_body(Req),
    %% RequestData = jsx:decode(Body, [return_maps]),
    %% Validate request
    %% case jesse:validate_with_schema(get_schema('diagnose_infra_request'), RequestData) of
    %%     {ok, ValidData} -> 
    %%         Result = your_controller:handle_diagnose_infra(ValidData),
    %%         ResponseBody = jsx:encode(Result),
    %%         {ok, 201, Headers, ResponseBody, Req2, Context};
    %%     {error, ValidationErrors} ->
    %%         ErrorBody = jsx:encode(#{error => <<"validation_failed">>, details => ValidationErrors}),
    %%         {error, 400, Headers, ErrorBody, Req2, Context}
    %% end.
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 201, Headers, ResponseBody, Req, Context};

%% @doc Disable advanced logging
%% Path: /api/butler_shared/v1/logging/debug/disable (POST)
accept_callback(_Class, 'disable_debug_logging', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Parse request body and call your controller
    %% {ok, Body, Req2} = cowboy_req:read_body(Req),
    %% RequestData = jsx:decode(Body, [return_maps]),
    %% Validate request
    %% case jesse:validate_with_schema(get_schema('disable_debug_logging_request'), RequestData) of
    %%     {ok, ValidData} -> 
    %%         Result = your_controller:handle_disable_debug_logging(ValidData),
    %%         ResponseBody = jsx:encode(Result),
    %%         {ok, 201, Headers, ResponseBody, Req2, Context};
    %%     {error, ValidationErrors} ->
    %%         ErrorBody = jsx:encode(#{error => <<"validation_failed">>, details => ValidationErrors}),
    %%         {error, 400, Headers, ErrorBody, Req2, Context}
    %% end.
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 201, Headers, ResponseBody, Req, Context};

%% @doc Enable advanced logging
%% Path: /api/butler_shared/v1/logging/debug/enable (POST)
accept_callback(_Class, 'enable_debug_logging', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Parse request body and call your controller
    %% {ok, Body, Req2} = cowboy_req:read_body(Req),
    %% RequestData = jsx:decode(Body, [return_maps]),
    %% Validate request
    %% case jesse:validate_with_schema(get_schema('enable_debug_logging_request'), RequestData) of
    %%     {ok, ValidData} -> 
    %%         Result = your_controller:handle_enable_debug_logging(ValidData),
    %%         ResponseBody = jsx:encode(Result),
    %%         {ok, 201, Headers, ResponseBody, Req2, Context};
    %%     {error, ValidationErrors} ->
    %%         ErrorBody = jsx:encode(#{error => <<"validation_failed">>, details => ValidationErrors}),
    %%         {error, 400, Headers, ErrorBody, Req2, Context}
    %% end.
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 201, Headers, ResponseBody, Req, Context};

%% @doc Run diagnostic tests for a specific service diagnose category
%% Path: /api/{service_name}/v1/diagnose (POST)
accept_callback(_Class, 'diagnose_service_v1', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Parse request body and call your controller
    %% {ok, Body, Req2} = cowboy_req:read_body(Req),
    %% RequestData = jsx:decode(Body, [return_maps]),
    %% Validate request
    %% case jesse:validate_with_schema(get_schema('diagnose_service_v1_request'), RequestData) of
    %%     {ok, ValidData} -> 
    %%         Result = your_controller:handle_diagnose_service_v1(ValidData),
    %%         ResponseBody = jsx:encode(Result),
    %%         {ok, 201, Headers, ResponseBody, Req2, Context};
    %%     {error, ValidationErrors} ->
    %%         ErrorBody = jsx:encode(#{error => <<"validation_failed">>, details => ValidationErrors}),
    %%         {error, 400, Headers, ErrorBody, Req2, Context}
    %% end.
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 201, Headers, ResponseBody, Req, Context};

%% @doc Diagnose system health
%% Path: /api/{service_name}/v2/diagnose (POST)
accept_callback(_Class, 'diagnose_service_v2', Req, Context) ->
    %% TODO: Implement business logic
    %% Example: Parse request body and call your controller
    %% {ok, Body, Req2} = cowboy_req:read_body(Req),
    %% RequestData = jsx:decode(Body, [return_maps]),
    %% Validate request
    %% case jesse:validate_with_schema(get_schema('diagnose_service_v2_request'), RequestData) of
    %%     {ok, ValidData} -> 
    %%         Result = your_controller:handle_diagnose_service_v2(ValidData),
    %%         ResponseBody = jsx:encode(Result),
    %%         {ok, 201, Headers, ResponseBody, Req2, Context};
    %%     {error, ValidationErrors} ->
    %%         ErrorBody = jsx:encode(#{error => <<"validation_failed">>, details => ValidationErrors}),
    %%         {error, 400, Headers, ErrorBody, Req2, Context}
    %% end.
    ResponseBody = jsx:encode(#{message => <<"Not implemented">>}),
    Headers = #{<<"content-type">> => <<"application/json">>},
    {ok, 201, Headers, ResponseBody, Req, Context};


%%%===================================================================
%%% Fallback
%%%===================================================================

provide_callback(_Class, OperationId, Req, Context) ->
    rebar3_openapi_utils:warn("Unimplemented operation: ~p", [OperationId]),
    ErrorBody = jsx:encode(#{error => <<"not_implemented">>}),
    {error, 501, #{<<"content-type">> => <<"application/json">>}, ErrorBody, Req, Context}.

accept_callback(_Class, OperationId, Req, Context) ->
    rebar3_openapi_utils:warn("Unimplemented operation: ~p", [OperationId]),
    ErrorBody = jsx:encode(#{error => <<"not_implemented">>}),
    {error, 501, #{<<"content-type">> => <<"application/json">>}, ErrorBody, Req, Context}.
